import argparse
import os
from wandb_train import main

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser = argparse.ArgumentParser()
    parser.add_argument("--dataset_name", type=str, default="xes3g5m")
    parser.add_argument("--model_name", type=str, default="eaikt")
    parser.add_argument("--emb_type", type=str, default="qid")
    parser.add_argument("--save_dir", type=str, default="saved_model_xes3g5m")
    parser.add_argument("--seed", type=int, default=42)
    parser.add_argument("--fold", type=int, default=4)
    parser.add_argument("--dropout", type=float, default=0.05)
    parser.add_argument("--emb_size", type=int, default=200)
    parser.add_argument("--learning_rate", type=float, default=1e-4)
    parser.add_argument("--use_wandb", type=int, default=1)
    parser.add_argument("--add_uuid", type=int, default=1)
    parser.add_argument("--emb_path", type=str, default="", help="if not empty string, it will overwrite the emb path in data config.")
    parser.add_argument("--batch_size", type=int, default=16) # OOM
    parser.add_argument("--num_epochs", type=int, default=200)
    parser.add_argument("--weighted_loss", type=int, default=0)
    parser.add_argument("--wandb_project_name", type=str, default="", help="if not empty string, it will overwrite the default wandb project name")
    parser.add_argument('--flag_load_emb', action='store_true', help="Explicitly control if the embeddings will be loaded from path")
    parser.add_argument('--flag_emb_freezed', action='store_true', help="Explicitly control if the embeddings will be freezed or trained")
    parser.add_argument("--final_fc_dim", type=int, default=256)
    parser.add_argument("--final_fc_dim2", type=int, default=256)
    parser.add_argument("--num_layers", type=int, default=2)
    parser.add_argument("--nheads", type=int, default=8)
    parser.add_argument("--start", type=int, default=50)
    parser.add_argument("--d_model", type=int, default=256)
    parser.add_argument("--d_ff", type=int, default=256)
    parser.add_argument("--num_attn_heads", type=int, default=8)
    parser.add_argument("--n_blocks", type=int, default=8)
    parser.add_argument("--optimizer", type=str, default=None)
    parser.add_argument("--cf_weight", type=float, default=0.1)
    parser.add_argument("--t_weight", type=float, default=0.1)
    parser.add_argument("--seq_len", type=int, default=256)
    parser.add_argument("--local_rank", type=int, default=os.getenv('LOCAL_RANK', -1))
    parser.add_argument("--num_gpus", type=int, default=1)
    parser.add_argument("--global_bs", type=int, default=512)
    parser.add_argument("--ckpt_path", type=str, default='', help='the ckpt for computing soft mask')

    args = parser.parse_args()

    params = vars(args)
    main(params,args)
